*** TEST 12 ***
INIT - Forward priority queue test
PRI1 - rtems_semaphore_obtain - wait forever on SM2
PRI2 - rtems_semaphore_obtain - wait forever on SM2
PRI3 - rtems_semaphore_obtain - wait forever on SM2
PRI4 - rtems_semaphore_obtain - wait forever on SM2
PRI5 - rtems_semaphore_obtain - wait forever on SM2
INIT - Backward priority queue test
PRI5 - rtems_semaphore_obtain - wait forever on SM2
PRI4 - rtems_semaphore_obtain - wait forever on SM2
PRI3 - rtems_semaphore_obtain - wait forever on SM2
PRI2 - rtems_semaphore_obtain - wait forever on SM2
PRI1 - rtems_semaphore_obtain - wait forever on SM2
<pause>
INIT - Binary Semaphore and Priority Inheritance Test
INIT - rtems_semaphore_create - allocated binary semaphore
INIT - rtems_semaphore_release - allocated binary semaphore
INIT - rtems_semaphore_delete - allocated binary semaphore
PRI5 - rtems_semaphore_obtain - wait forever on SM2
Set priority of self while holding resource
PRI5 - rtems_task_suspend - until all priority tasks blocked
PDRV - priority of PRI5 is 8
PRI4 - rtems_semaphore_obtain - wait forever on SM2
PDRV - change priority of PRI5 from 8 to 9
PDRV - priority of PRI5 is 8
PRI3 - rtems_semaphore_obtain - wait forever on SM2
PDRV - priority of PRI5 is 8
PRI2 - rtems_semaphore_obtain - wait forever on SM2
PDRV - priority of PRI5 is 7
PRI1 - rtems_semaphore_obtain - wait forever on SM2
PDRV - priority of PRI5 is 6
PDRV - rtems_task_resume - PRI5
PRI5 - rtems_task_delete - all tasks waiting on SM2
PRI5 - rtems_semaphore_obtain - nested
PRI5 - rtems_semaphore_release - nested
PRI5 - rtems_semaphore_release - restore priority
PRI5 - priority of PRI5 is 9
<pause>
TA1 - rtems_semaphore_ident - smid => 1a010009
TA1 - rtems_semaphore_obtain - wait forever on SM2
TA1 - got SM2
TA1 - rtems_semaphore_obtain - wait forever on SM3
TA1 - got SM3
TA1 - rtems_semaphore_obtain - get SM1 - RTEMS_NO_WAIT
TA1 - got SM1
TA1 - rtems_task_wake_after - sleep 5 seconds
TA2 - rtems_semaphore_obtain - wait forever on SM1
TA3 - rtems_semaphore_obtain - wait forever on SM2
<pause>
TA1 - rtems_semaphore_release - release SM1
TA1 - rtems_semaphore_obtain - waiting for SM1 with 10 second timeout
TA2 - got SM1
TA2 - rtems_semaphore_release - release SM1
TA2 - rtems_task_set_priority - make self highest priority task
TA2 - rtems_semaphore_obtain - wait forever on SM2
TA1 - got SM1
TA1 - rtems_semaphore_release - release SM2
TA2 - got SM2
TA2 - rtems_semaphore_release - release SM2
TA2 - rtems_task_delete - delete self
TA1 - rtems_task_wake_after - sleep 5 seconds
TA3 - got SM2
TA3 - rtems_semaphore_release - release SM2
TA3 - rtems_semaphore_obtain - wait forever on SM3
<pause>
TA1 - rtems_task_delete - delete TA3
TA1 - rtems_task_wake_after - sleep 5 seconds
TA4 - rtems_semaphore_obtain - wait forever on SM1
TA5 - rtems_semaphore_obtain - wait forever on SM1
TA1 - rtems_task_delete - delete TA4
TA1 - rtems_semaphore_release - release SM1
TA1 - rtems_task_wake_after - sleep 5 seconds
TA5 - got SM1
TA5 - rtems_semaphore_obtain - wait forever on SM1
TA1 - rtems_semaphore_delete - delete SM1
TA1 - rtems_semaphore_delete - delete SM3
TA1 - rtems_task_delete - delete self
TA5 - SM1 deleted by TA1
*** END OF TEST 12 ***
