# make/main.cfg
#
#   Make(1) configuration file include'd by all Makefile's
#

#
# Initial target for make(1)
#  Once this is established we can safely include other targets
#  within this make-include file.
#

default_target: all

#
# where things are relative to PROJECT_ROOT; shouldn't need to change,
# but could be overridden in custom files.
#

PROJECT_RELEASE=$(exec_prefix)/$(RTEMS_BSP)
PROJECT_BIN=$(PROJECT_ROOT)/bin
PROJECT_INCLUDE=$(PROJECT_RELEASE)/lib/include
PROJECT_TOOLS = $(PROJECT_RELEASE)/build-tools

## translate VARIANT into VARIANT_V
ifeq ($(VARIANT),)
VARIANT = OPTIMIZE
endif

VARIANT_OPTIMIZE_V = OPTIMIZE
VARIANT_DEBUG_V = DEBUG
VARIANT_optimize_V = OPTIMIZE
VARIANT_debug_V = DEBUG

VARIANT_V = $(VARIANT_$(VARIANT)_V)

## Setup the variant build subdirectory
ARCH_OPTIMIZE_V = o-optimize
ARCH_DEBUG_V = o-debug

ARCH__V = $(ARCH_OPTIMIZE_V)
ARCH = $(ARCH_$(VARIANT_V)_V)

$(ARCH):
	test -d ${ARCH} || mkdir $(ARCH)
#
# Default makefile name
# May be overridden by command line macro assignment
#

MAKEFILE=Makefile

#
# Target variant names
#
TARGET_VARIANTS = optimize debug

#
# Generate list of object directories: o-optimize, o-debug
#
VARIANTS=${TARGET_VARIANTS:%=o-%}

#
# List of "recursion-able" targets for directory Makefiles
#

RECURSE_TARGETS=all depend install \
preinstall-recursive \
$(TARGET_VARIANTS)

ifndef AUTOMAKE
distclean-generic:
	-$(RM) .#* $(CONFIG_CLEAN_FILES)
	-$(RM) -r $(CLOBBER_ADDITIONS)

clean-generic:
	-$(RM) a.out core mon.out gmon.out
	-$(RM) -r $(CLEAN_ADDITIONS)
endif

.PHONY:	$(RECURSE_TARGETS) 
.PHONY: clean-generic
.PHONY: distclean-generic
