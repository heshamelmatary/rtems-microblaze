/*
 *  This file contains directives for the GNU linker which are specific
 *  to the MPC8260ADS Board
 */

OUTPUT_FORMAT("elf32-powerpc", "elf32-powerpc",
              "elf32-powerpc")
OUTPUT_ARCH(powerpc)

ENTRY(start)

/*
 * Declare some sizes.
 * XXX: The assignment of ". += XyzSize;" fails in older gld's if the
 *      number used there is not constant.  If this happens to you, edit
 *      the lines marked XXX below to use a constant value.
 */
StackSize   = DEFINED(StackSize) ? StackSize : 0x8000;
RamBase     = DEFINED(RamBase) ? RamBase : 0x0;
RamSize     = DEFINED(RamSize) ? RamDiskSize : 0x0800000; /* 8M program ram */
HeapSize    = DEFINED(HeapSize) ? HeapSize : 0x0;
RamDiskBase = DEFINED(RamDiskBase) ? RamDiskBase : 0x0800000;
RamDiskSize = DEFINED(RamDiskSize) ? RamDiskSize : 0x0800000; /* 8M ram disk */

MEMORY
{
  ram : org = 0x0, l = 8M
  ramdisk : org = 0x0800000, l = 8M
  dpram : org = 0x04700000, l = 128K
  flash : org = 0xff800000, l = 8M
}


SECTIONS
{
    /*
     * The stack will live in this area - between the vectors and
     * the text section.
     */

    .text 0x10000:
    {
    _textbase = .;


    text.start = .;

    /* Entry point is the .entry section */
    *(.entry)
    *(.entry2)

    /* Actual Code */
    *(.text*)


    *(.rodata*)
    *(.rodata1)


    /*
     * Special FreeBSD sysctl sections.
     */
    . = ALIGN (16);
    __start_set_sysctl_set = .;
    *(set_sysctl_*);
    __stop_set_sysctl_set = ABSOLUTE(.);
    *(set_domain_*);
    *(set_pseudo_*);

    /* C++ constructors/destructors */
    *(.gnu.linkonce.t*)

    /*  Initialization and finalization code.
     *
     *  Various files can provide initialization and finalization functions.
     *  The bodies of these functions are in .init and .fini sections. We
     *  accumulate the bodies here, and prepend function prologues from
     *  ecrti.o and function epilogues from ecrtn.o. ecrti.o must be linked
     *  first; ecrtn.o must be linked last. Because these are wildcards, it
     *  doesn't matter if the user does not actually link against ecrti.o and
     *  ecrtn.o; the linker won't look for a file to match a wildcard.  The
     *  wildcard also means that it doesn't matter which directory ecrti.o
     *  and ecrtn.o are in.
     */
    PROVIDE (_init = .);
    *ecrti.o(.init)
    *(.init)
    *ecrtn.o(.init)

    PROVIDE (_fini = .);
    *ecrti.o(.fini)
    *(.fini)
    *ecrtn.o(.init)

    /*
     *  C++ constructors and destructors for static objects.
     *  PowerPC EABI does not use crtstuff yet, so we build "old-style"
     *  constructor and destructor lists that begin with the list lenght
     *  end terminate with a NULL entry.
     */

    PROVIDE (__CTOR_LIST__ = .);	
    /* LONG((__CTOR_END__ - __CTOR_LIST__) / 4 - 2) */
    *crtbegin.o(.ctors)
    *(.ctors)
    *crtend.o(.ctors)
    LONG(0)
    PROVIDE (__CTOR_END__ = .);

    PROVIDE (__DTOR_LIST__ = .);
    /* LONG((__DTOR_END__ - __DTOR_LIST__) / 4 - 2) */
    *crtbegin.o(.dtors)
    *(.dtors)
    *crtend.o(.dtors)
    LONG(0)
    PROVIDE (__DTOR_END__ = .);

    /* Exception frame info */
    *(.eh_frame)

    /* Miscellaneous read-only data */
    _rodata_start = . ;
    *(.gnu.linkonce.r*)
    *(.lit)
    *(.shdata)
    *(.rodata)
    *(.rodata1)
    *(.descriptors)
    *(rom_ver)
    _erodata = .;


    /* Various possible names for the end of the .text section */
    etext = ALIGN(0x10);
    _etext = .;
    _endtext = .;
    text.end = .;
    PROVIDE (etext = .);
    PROVIDE (__etext = .);

    } > ram

  .tdata : {
    _TLS_Data_begin = .;
    *(.tdata .tdata.* .gnu.linkonce.td.*)
    _TLS_Data_end = .;
  } >ram

  .tbss : {
    _TLS_BSS_begin = .;
    *(.tbss .tbss.* .gnu.linkonce.tb.*) *(.tcommon)
    _TLS_BSS_end = .;
  } >ram

  _TLS_Data_size = _TLS_Data_end - _TLS_Data_begin;
  _TLS_Data_begin = _TLS_Data_size != 0 ? _TLS_Data_begin : _TLS_BSS_begin;
  _TLS_Data_end = _TLS_Data_size != 0 ? _TLS_Data_end : _TLS_BSS_begin;
  _TLS_BSS_size = _TLS_BSS_end - _TLS_BSS_begin;
  _TLS_Size = _TLS_BSS_end - _TLS_Data_begin;
  _TLS_Alignment = MAX (ALIGNOF (.tdata), ALIGNOF (.tbss));


  .rel.dyn        :
    {
      *(.rel.init)
      *(.rel.text .rel.text.* .rel.gnu.linkonce.t.*)
      *(.rel.fini)
      *(.rel.rodata .rel.rodata.* .rel.gnu.linkonce.r.*)
      *(.rel.data.rel.ro* .rel.gnu.linkonce.d.rel.ro.*)
      *(.rel.data .rel.data.* .rel.gnu.linkonce.d.*)
      *(.rel.tdata .rel.tdata.* .rel.gnu.linkonce.td.*)
      *(.rel.tbss .rel.tbss.* .rel.gnu.linkonce.tb.*)
      *(.rel.ctors)
      *(.rel.dtors)
      *(.rel.got)
      *(.rel.sdata .rel.sdata.* .rel.gnu.linkonce.s.*)
      *(.rel.sbss .rel.sbss.* .rel.gnu.linkonce.sb.*)
      *(.rel.sdata2 .rel.sdata2.* .rel.gnu.linkonce.s2.*)
      *(.rel.sbss2 .rel.sbss2.* .rel.gnu.linkonce.sb2.*)
      *(.rel.bss .rel.bss.* .rel.gnu.linkonce.b.*)
    } >ram
  .rela.dyn       :
    {
      *(.rela.init)
      *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*)
      *(.rela.fini)
      *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*)
      *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*)
      *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*)
      *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*)
      *(.rela.ctors)
      *(.rela.dtors)
      *(.rela.got)
      *(.rela.got1)
      *(.rela.got2)
      *(.rela.sdata .rela.sdata.* .rela.gnu.linkonce.s.*)
      *(.rela.sbss .rela.sbss.* .rela.gnu.linkonce.sb.*)
      *(.rela.sdata2 .rela.sdata2.* .rela.gnu.linkonce.s2.*)
      *(.rela.sbss2 .rela.sbss2.* .rela.gnu.linkonce.sb2.*)
      *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*)
    } >ram
  .rel.plt        : { *(.rel.plt) }
  .rela.plt       : { *(.rela.plt) }

    PROVIDE (__EXCEPT_START__ = .);
    .gcc_except_table   : { *(.gcc_except_table*) } >ram
    PROVIDE (__EXCEPT_END__ = .);
    __GOT_START__ = .;
    .got :
    {
      s.got = .;
      *(.got.plt) *(.got)
    } > ram
    __GOT_END__ = .;

    .got1		  : { *(.got1) 		} >ram
    PROVIDE (__GOT2_START__ = .);
    PROVIDE (_GOT2_START_ = .);
    .got2		  :  { *(.got2) 	} >ram
    PROVIDE (__GOT2_END__ = .);
    PROVIDE (_GOT2_END_ = .);

    PROVIDE (__FIXUP_START__ = .);
    PROVIDE (_FIXUP_START_ = .);
    .fixup	  : { *(.fixup) 	} >ram
    PROVIDE (_FIXUP_END_ = .);
    PROVIDE (__FIXUP_END__ = .);
  
    .sdata : {
      PROVIDE (_SDA_BASE_ = 32768);
      *(.sdata .sdata.* .gnu.linkonce.s.*)
    } > ram
 
    .sbss : {
      __bss_start = .;
 
      PROVIDE (__sbss_start = .); PROVIDE (___sbss_start = .);
      *(.scommon)
      *(.dynsbss)
      *(.sbss .sbss.* .gnu.linkonce.sb.*)
      PROVIDE (__sbss_end = .); PROVIDE (___sbss_end = .);
    } > ram
 
    .sdata2 : {
      PROVIDE (_SDA2_BASE_ = 32768);
 
      *(.sdata2 .sdata2.* .gnu.linkonce.s2.*)
    } > ram =0
 
    .sbss2 : {
      *(.sbss2 .sbss2.* .gnu.linkonce.sb2.*)
    } > ram =0

    .bss :
    {
      bss.start = .;
      *(.bss .bss* .gnu.linkonce.b*)
      . = ALIGN(4);
      bss.end = .;
    } > ram

    /* R/W Data */
    .data ( . ) :
    {
      . = ALIGN (4);

      data.start = .;

      *(.data)
      *(.data1)
      *(.data.* .gnu.linkonce.d.*)
      PROVIDE (__SDATA_START__ = .);
      *(.sdata .sdata.* .gnu.linkonce.s.*)
      data.end = .;
    } > ram

    data.size = data.end - data.start;
    bss.size = bss.end - bss.start;
    text.size = text.end - text.start;

    PROVIDE(_end = data.end);

    .gzipmalloc : {
	. = ALIGN (16);
        _startmalloc = .;
     } >ram


    /*
     * Interrupt stack setup
     */
    IntrStack_start = ALIGN(0x10);
    . += 0x4000;
    intrStack = .;
    PROVIDE(intrStackPtr = intrStack);


    clear_end = .;

    WorkAreaBase = .;

    /* Sections for compressed .text and .data         */
    /* after the .datarom section is an int specifying */
    /* the length of the following compressed image    */
    /* Executes once then could get overwritten        */
    .textrom 0x100000 :
    {
    	*(.textrom)
    	_endloader = .;
    } > ram

    .datarom :
    {
    	_dr_start = .;
    	*(.datarom)
    	_dr_end = .;
    } > ram
    dr_len = _dr_end - _dr_start;

    .dpram :
    {
      m8260 = .;
      _m8260 = .;
      . += (128 * 1024);
     } > dpram


     /* the reset vector is at 0xfff00000 which is */
     /* located at offset 0x400000 from the base   */
     /* of flash                                   */
    .bootrom 0xFFF00000 :
    {
      *(.bootrom)
      _endboot = .;
    } > flash


    .line 0 : { *(.line) }
    .debug 0 : { *(.debug) }
    .debug_sfnames 0 : { *(.debug_sfnames) }
    .debug_srcinfo 0 : { *(.debug_srcinfo) }
    .debug_pubnames 0 : { *(.debug_pubnames) }
    .debug_aranges 0 : { *(.debug_aranges) }
    .debug_aregion 0 : { *(.debug_aregion) }
    .debug_macinfo 0 : { *(.debug_macinfo) }
    .stab 0 : { *(.stab) }
    .stabstr 0 : { *(.stabstr) }
}
