/*
 *  This file contains directives for the GNU linker that are specific
 *  to the MBX860-2 board.
 */

OUTPUT_FORMAT("elf32-powerpc", "elf32-powerpc", "elf32-powerpc")
OUTPUT_ARCH(powerpc) 
ENTRY(_start)

/*
 * Declare some sizes.
 * XXX: The assignment of ". += XyzSize;" fails in older gld's if the
 *      number used there is not constant.  If this happens to you, edit
 *      the lines marked XXX below to use a constant value.
 */
StackSize = DEFINED(StackSize) ? StackSize : 0x1000;
RamBase = DEFINED(RamBase) ? RamBase : 0;
RamSize = DEFINED(RamSize) ? RamSize : 4M;
HeapSize = DEFINED(HeapSize) ? HeapSize : 0x0;
 
MEMORY
  {
    ram : org = 0x0, l = 4M
    nvram : org = 0xfa000000, l = 32K
    dpram : org = 0xfa200000, l = 16K
    flash : org = 0xfc000000, l = 2M
    immr  : org = 0xfa200000, l = 16K
  }


SECTIONS
{
  /*
   *  If the vectors are specified statically rather than created at run time,
   *  accumulate them starting at VMA 0x0.
   */ 
  .vectors :
  {
    *(.vectors)
  } >ram

  /* 
   *  The stack will live in this area - between the vectors and
   *  the text section.
   */
  
  .text 0x10000:
  {
    /* Read-only sections, merged into text segment: */
    
    text.start = .;

    /* Entry point is the .entry section */
    *(.entry)
    *(.entry2)

    /* Actual code */
    *(.text*)
       
    /* C++ constructors/destructors */
    *(.gnu.linkonce.t*)
       
    /*  Initialization and finalization code.
     *
     *  Various files can provide initialization and finalization functions.
     *  The bodies of these functions are in .init and .fini sections. We
     *  accumulate the bodies here, and prepend function prologues from
     *  ecrti.o and function epilogues from ecrtn.o. ecrti.o must be linked
     *  first; ecrtn.o must be linked last. Because these are wildcards, it
     *  doesn't matter if the user does not actually link against ecrti.o and
     *  ecrtn.o; the linker won't look for a file to match a wildcard.  The
     *  wildcard also means that it doesn't matter which directory ecrti.o
     *  and ecrtn.o are in. 
     */
    PROVIDE (_init = .);
    *ecrti.o(.init)
    *(.init)
    *ecrtn.o(.init)
    
    PROVIDE (_fini = .);
    *ecrti.o(.fini)
    *(.fini)
    *ecrtn.o(.init)

    /* 
     *  C++ constructors and destructors for static objects.
     *  PowerPC EABI does not use crtstuff yet, so we build "old-style"
     *  constructor and destructor lists that begin with the list lenght
     *  end terminate with a NULL entry.
     */
     
    PROVIDE (__CTOR_LIST__ = .);       
    /* LONG((__CTOR_END__ - __CTOR_LIST__) / 4 - 2) */
    *crtbegin.o(.ctors)
    *(.ctors)
    *crtend.o(.ctors)
    LONG(0)
    PROVIDE (__CTOR_END__ = .);
  
    PROVIDE (__DTOR_LIST__ = .);
    /* LONG((__DTOR_END__ - __DTOR_LIST__) / 4 - 2) */
    *crtbegin.o(.dtors)
    *(.dtors)
    *crtend.o(.dtors)
    LONG(0)
    PROVIDE (__DTOR_END__ = .);
  
    /*
     * Special FreeBSD sysctl sections.
     */
    . = ALIGN (16);
    __start_set_sysctl_set = .;
    *(set_sysctl_*);
    __stop_set_sysctl_set = ABSOLUTE(.);
    *(set_domain_*);
    *(set_pseudo_*);

    /* Exception frame info */
    *(.eh_frame)

   /* Miscellaneous read-only data */
    _rodata_start = . ;
    *(.gnu.linkonce.r*)
    *(.lit)
    *(.shdata)
    *(.rodata*)
    *(.rodata1)
    *(.descriptors)
    *(rom_ver)
    _erodata = .;


    /* Various possible names for the end of the .text section */
    etext = ALIGN(0x10);
    _etext = .;
    _endtext = .;
    text.end = .;
    PROVIDE (etext = .);
    PROVIDE (__etext = .);
 } > ram

  .tdata : {
    _TLS_Data_begin = .;
    *(.tdata .tdata.* .gnu.linkonce.td.*)
    _TLS_Data_end = .;
  } >ram

  .tbss : {
    _TLS_BSS_begin = .;
    *(.tbss .tbss.* .gnu.linkonce.tb.*) *(.tcommon)
    _TLS_BSS_end = .;
  } >ram

  _TLS_Data_size = _TLS_Data_end - _TLS_Data_begin;
  _TLS_Data_begin = _TLS_Data_size != 0 ? _TLS_Data_begin : _TLS_BSS_begin;
  _TLS_Data_end = _TLS_Data_size != 0 ? _TLS_Data_end : _TLS_BSS_begin;
  _TLS_BSS_size = _TLS_BSS_end - _TLS_BSS_begin;
  _TLS_Size = _TLS_BSS_end - _TLS_Data_begin;
  _TLS_Alignment = MAX (ALIGNOF (.tdata), ALIGNOF (.tbss));
 
  .rel.dyn        :
    {
      *(.rel.init)
      *(.rel.text .rel.text.* .rel.gnu.linkonce.t.*)
      *(.rel.fini)
      *(.rel.rodata .rel.rodata.* .rel.gnu.linkonce.r.*)
      *(.rel.data.rel.ro* .rel.gnu.linkonce.d.rel.ro.*)
      *(.rel.data .rel.data.* .rel.gnu.linkonce.d.*)
      *(.rel.tdata .rel.tdata.* .rel.gnu.linkonce.td.*)
      *(.rel.tbss .rel.tbss.* .rel.gnu.linkonce.tb.*)
      *(.rel.ctors)
      *(.rel.dtors)
      *(.rel.got)
      *(.rel.sdata .rel.sdata.* .rel.gnu.linkonce.s.*)
      *(.rel.sbss .rel.sbss.* .rel.gnu.linkonce.sb.*)
      *(.rel.sdata2 .rel.sdata2.* .rel.gnu.linkonce.s2.*)
      *(.rel.sbss2 .rel.sbss2.* .rel.gnu.linkonce.sb2.*)
      *(.rel.bss .rel.bss.* .rel.gnu.linkonce.b.*)
    } >ram
  .rela.dyn       :
    {
      *(.rela.init)
      *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*)
      *(.rela.fini)
      *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*)
      *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*)
      *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*)
      *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*)
      *(.rela.ctors)
      *(.rela.dtors)
      *(.rela.got)
      *(.rela.got1)
      *(.rela.got2)
      *(.rela.sdata .rela.sdata.* .rela.gnu.linkonce.s.*)
      *(.rela.sbss .rela.sbss.* .rela.gnu.linkonce.sb.*)
      *(.rela.sdata2 .rela.sdata2.* .rela.gnu.linkonce.s2.*)
      *(.rela.sbss2 .rela.sbss2.* .rela.gnu.linkonce.sb2.*)
      *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*)
    } >ram
  .rel.plt        : { *(.rel.plt) }
  .rela.plt       : { *(.rela.plt) }

  /* R/W Data */
  .data :
  {
    data_start = .;
    
    *(.data)
    *(.data.*)
    *(.data1)
    
    PROVIDE (__EXCEPT_START__ = .);
    *(.gcc_except_table*)
    PROVIDE (__EXCEPT_END__ = .);
    
    PROVIDE(__GOT_START__ = .);
    *(.got.plt) 
    *(.got)
    PROVIDE(__GOT_END__ = .);
  
    *(.got1)
    
    PROVIDE (__GOT2_START__ = .);
    PROVIDE (_GOT2_START_ = .);
    *(.got2)
    PROVIDE (__GOT2_END__ = .);
    PROVIDE (_GOT2_END_ = .);
  
    PROVIDE (__FIXUP_START__ = .);
    PROVIDE (_FIXUP_START_ = .);
    *(.fixup)
    PROVIDE (_FIXUP_END_ = .);
    PROVIDE (__FIXUP_END__ = .);
  } > ram
  
  .sdata : {
    PROVIDE (_SDA_BASE_ = 32768);
    *(.sdata .sdata.* .gnu.linkonce.s.*)
  } > ram

  .sbss : {
    __bss_start = .;

    PROVIDE (__sbss_start = .); PROVIDE (___sbss_start = .);
    *(.scommon)
    *(.dynsbss)
    *(.sbss .sbss.* .gnu.linkonce.sb.*)
    PROVIDE (__sbss_end = .); PROVIDE (___sbss_end = .);
  } > ram

  .sdata2 : {
    PROVIDE (_SDA2_BASE_ = 32768);

    *(.sdata2 .sdata2.* .gnu.linkonce.s2.*)
  } > ram =0

  .sbss2 : {
    *(.sbss2 .sbss2.* .gnu.linkonce.sb2.*)
  } > ram =0
   
  .bss :
  {
    bss.start = .;
    *(.bss .bss* .gnu.linkonce.b*)
    *(COMMON)
    . = ALIGN(4);
    bss.end = .;

  } > ram
  
  bss.size = bss.end - bss.start;
  text.size = text.end - text.start;
  PROVIDE(_end = bss.end);
  /*
   * Interrupt stack setup
   */

  IntrStack_start = ALIGN(0x10);
  . += 0x4000;
  intrStack = .;
  PROVIDE(intrStackPtr = intrStack);

  WorkAreaBase = .;

  dpram : 
  {
  m8xx = .;
  _m8xx = .;
  /*   . += (16 * 1024); this makes the mbx loader crash */
  } >immr

  /* Stabs debugging sections.  */
  .stab 0 : { *(.stab) }
  .stabstr 0 : { *(.stabstr) }
  .stab.excl 0 : { *(.stab.excl) }
  .stab.exclstr 0 : { *(.stab.exclstr) }
  .stab.index 0 : { *(.stab.index) }
  .stab.indexstr 0 : { *(.stab.indexstr) }
  .comment 0 : { *(.comment) }
  
  /* DWARF debug sections.
     Symbols in the DWARF debugging sections are relative to the beginning
     of the section so we begin them at 0.  */
  /* DWARF 1 */
  .debug          0 : { *(.debug) }
  .line           0 : { *(.line) }
  
  /* GNU DWARF 1 extensions */
  .debug_srcinfo  0 : { *(.debug_srcinfo) }
  .debug_sfnames  0 : { *(.debug_sfnames) }
  
  /* DWARF 1.1 and DWARF 2 */
  .debug_aranges  0 : { *(.debug_aranges) }
  .debug_pubnames 0 : { *(.debug_pubnames) }
  
  /* DWARF 2 */
  .debug_info     0 : { *(.debug_info) }
  .debug_abbrev   0 : { *(.debug_abbrev) }
  .debug_line     0 : { *(.debug_line) }
  .debug_frame    0 : { *(.debug_frame) }
  .debug_str      0 : { *(.debug_str) }
  .debug_loc      0 : { *(.debug_loc) }
  .debug_macinfo  0 : { *(.debug_macinfo) }
  
  /* SGI/MIPS DWARF 2 extensions */
  .debug_weaknames 0 : { *(.debug_weaknames) }
  .debug_funcnames 0 : { *(.debug_funcnames) }
  .debug_typenames 0 : { *(.debug_typenames) }
  .debug_varnames  0 : { *(.debug_varnames) }
  /* These must appear regardless of  .  */
}
