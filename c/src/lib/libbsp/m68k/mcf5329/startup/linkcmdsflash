/*
 *  This file contains directives for the GNU linker which are specific
 *  to the Freescale ColdFire mcf52235
 *
 *  COPYRIGHT (c) 1989-1999.
 *  On-Line Applications Research Corporation (OAR).
 *
 *  The license and distribution terms for this file may be
 *  found in the file LICENSE in this distribution or at
 *  http://www.rtems.org/license/LICENSE.e
 */

/*
 * Declare some sizes.
 */
_CoreSRamBase = DEFINED(RamBase) ? RamBase : 0x80000000;
_CoreSRamSize = DEFINED(RamSize) ? RamSize : 32K;

RamBase = DEFINED(RamBase) ? RamBase : 0x40000000;
RamSize = DEFINED(RamSize) ? RamSize : 32M;

_BootFlashBase = DEFINED(_FlashBase) ? _FlashBase : 0x00000000;
_BootFlashSize = DEFINED(_FlashBase) ? _FlashBase : 2M;

HeapSize = DEFINED(HeapSize) ? HeapSize : 0;
_StackSize = DEFINED(_StackSize) ? _StackSize : 0x400;

_VBR = 0x40000000;

ENTRY(start)

MEMORY
{
    core_sram : ORIGIN = 0x80000000, LENGTH = 32K
    boot_flash : ORIGIN = 0x00000000, LENGTH = 2M
    dram : ORIGIN = 0x40000000, LENGTH = 32M
}

SECTIONS
{
    /*
    * Text, data and bss segments
    */
    .text : {

        *(.text*)
        *(.ram_code)

        /*
        * C++ constructors/destructors
        */
        *(.gnu.linkonce.t.*)

        /*
        * Initialization and finalization code.
        *
        * Various files can provide initialization and finalization
        * functions.  crtbegin.o and crtend.o are two instances. The
        * body of these functions are in .init and .fini sections. We
        * accumulate the bodies here, and prepend function prologues
        * from crti.o and function epilogues from crtn.o. crti.o must
        * be linked first; crtn.o must be linked last.  Because these
        * are wildcards, it doesn't matter if the user does not
        * actually link against crti.o and crtn.o; the linker won't
        * look for a file to match a wildcard.  The wildcard also
        * means that it doesn't matter which directory crti.o and
        * crtn.o are in. 
        */
        PROVIDE (_init = .);
        *crti.o(.init)
        *(.init)
        *crtn.o(.init)
        PROVIDE (_fini = .);
        *crti.o(.fini)
        *(.fini)
        *crtn.o(.fini)

        /*
            * Special FreeBSD sysctl sections.
            */
        . = ALIGN (16);
        __start_set_sysctl_set = .;
        *(set_sysctl_*);
        __stop_set_sysctl_set = ABSOLUTE(.);
        *(set_domain_*);
        *(set_pseudo_*);

        /*
        * C++ constructors/destructors
        *
        * gcc uses crtbegin.o to find the start of the constructors
        * and destructors so we make sure it is first.  Because this
        * is a wildcard, it doesn't matter if the user does not
        * actually link against crtbegin.o; the linker won't look for
        * a file to match a wildcard.  The wildcard also means that
        * it doesn't matter which directory crtbegin.o is in. The
        * constructor and destructor list are terminated in
        * crtend.o.  The same comments apply to it.
        */
        . = ALIGN (16);
        *crtbegin.o(.ctors)
        *(.ctors)
        *crtend.o(.ctors)
        *crtbegin.o(.dtors)
        *(.dtors)
        *crtend.o(.dtors)

        /*
        * Exception frame info
        */
        . = ALIGN (16);
        *(.eh_frame)

        /*
        * Read-only data
        */
        . = ALIGN (16);
        _rodata_start = . ;
        *(.rodata*)
        *(.gnu.linkonce.r*)

        . = ALIGN (16);

        *(.console_gdb_xfer)
        *(.bootstrap_data)
    } > boot_flash

    .tdata : {
        _TLS_Data_begin = .;
        *(.tdata .tdata.* .gnu.linkonce.td.*)
        _TLS_Data_end = .;
        . = ALIGN(16);
        _estuff = .;
        PROVIDE (_etext = .);
    } > boot_flash

    .tbss : {
        _TLS_BSS_begin = .;
        *(.tbss .tbss.* .gnu.linkonce.tb.*) *(.tcommon)
        _TLS_BSS_end = .;
    } > boot_flash

    _TLS_Data_size = _TLS_Data_end - _TLS_Data_begin;
    _TLS_Data_begin = _TLS_Data_size != 0 ? _TLS_Data_begin : _TLS_BSS_begin;
    _TLS_Data_end = _TLS_Data_size != 0 ? _TLS_Data_end : _TLS_BSS_begin;
    _TLS_BSS_size = _TLS_BSS_end - _TLS_BSS_begin;
    _TLS_Size = _TLS_BSS_end - _TLS_Data_begin;
    _TLS_Alignment = MAX (ALIGNOF (.tdata), ALIGNOF (.tbss));

    .data 0x40000500 : AT (_estuff)
    {
        PROVIDE( _data_dest_start = . );
        PROVIDE( _copy_start = .);
        *(.data*)
        *(.gnu.linkonce.d*)
        *(.gcc_except_table*)
        *(.jcr)
        . = ALIGN (16);
        PROVIDE (_edata = .);
        PROVIDE (_copy_end = .);
        PROVIDE (_data_dest_end = . );
    } > dram

    _data_src_start = _estuff;
    _data_src_end = _data_dest_start + SIZEOF(.data);

    .bss : 
    {
        _clear_start = .;
        *(.bss*)
        *(COMMON)
        . = ALIGN (16);
        PROVIDE (_end = .);

        _clear_end = .;
        WorkAreaBase = .;
    } > dram

    .start_stack :
    {
        /*
         * Starting Stack
         */ 
        . += _StackSize;
        . = ALIGN (16);
        PROVIDE(_StackInit = .);
    } > core_sram

    /* Stabs debugging sections.  */
    .stab 0 : { *(.stab) }
    .stabstr 0 : { *(.stabstr) }
    .stab.excl 0 : { *(.stab.excl) }
    .stab.exclstr 0 : { *(.stab.exclstr) }
    .stab.index 0 : { *(.stab.index) }
    .stab.indexstr 0 : { *(.stab.indexstr) }
    .comment 0 : { *(.comment) }

    PROVIDE (end_of_all = .);
}
