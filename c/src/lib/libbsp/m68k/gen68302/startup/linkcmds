/*
 *  This file contains directives for the GNU linker which are specific
 *  to the Generic MC68302 board.
 * 
 *  COPYRIGHT (c) 1989-2007.
 *  On-Line Applications Research Corporation (OAR).
 *
 *  The license and distribution terms for this file may be
 *  found in the file LICENSE in this distribution or at
 *  http://www.rtems.org/license/LICENSE.
 */

MEMORY 
{
	ram : org = 0x0000, l = 16M
}

m302 = 0xf7f000;
_VBR = 0x000000;		/* location of the VBR table (in RAM) */

/*
 * Declare some sizes.
 */
RamBase = DEFINED(RamBase) ? RamBase : 0x0;
RamSize = DEFINED(RamSize) ? RamSize : 16M;
HeapSize = DEFINED(HeapSize) ? HeapSize : 0x0;
_StackSize = DEFINED(_StackSize) ? _StackSize : 0x1000;

SECTIONS
{
	ram : {
		. = 0xc00000;
	} >ram

        /*
         * Text, data and bss segments
         */
        .text : {
                *(.text*)

		/*
		 * C++ constructors/destructors
		 */
		*(.gnu.linkonce.t.*)

		/*
		 * Initialization and finalization code.
     		 *
     		 * Various files can provide initialization and finalization
		 * functions.  crtbegin.o and crtend.o are two instances. The
		 * body of these functions are in .init and .fini sections. We
		 * accumulate the bodies here, and prepend function prologues
		 * from crti.o and function epilogues from crtn.o. crti.o must
		 * be linked first; crtn.o must be linked last.  Because these
		 * are wildcards, it doesn't matter if the user does not
		 * actually link against crti.o and crtn.o; the linker won't
		 * look for a file to match a wildcard.  The wildcard also
		 * means that it doesn't matter which directory crti.o and
		 * crtn.o are in. 
		 */
		PROVIDE (_init = .);
		*crti.o(.init)
		*(.init)
		*crtn.o(.init)
		PROVIDE (_fini = .);
		*crti.o(.fini)
		*(.fini)
		*crtn.o(.fini)

		/*
		 * Special FreeBSD sysctl sections.
		 */
		. = ALIGN (16);
		__start_set_sysctl_set = .;
		*(set_sysctl_*);
		__stop_set_sysctl_set = ABSOLUTE(.);
		*(set_domain_*);
		*(set_pseudo_*);

		/*
		 * C++ constructors/destructors
     		 *
     		 * gcc uses crtbegin.o to find the start of the constructors
		 * and destructors so we make sure it is first.  Because this
		 * is a wildcard, it doesn't matter if the user does not
		 * actually link against crtbegin.o; the linker won't look for
		 * a file to match a wildcard.  The wildcard also means that
		 * it doesn't matter which directory crtbegin.o is in. The
		 * constructor and destructor list are terminated in
		 * crtend.o.  The same comments apply to it.
		 */
		. = ALIGN (16);
		*crtbegin.o(.ctors)
		*(.ctors)
		*crtend.o(.ctors)
		*crtbegin.o(.dtors)
		*(.dtors)
		*crtend.o(.dtors)

		/*
		 * Exception frame info
		 */
		. = ALIGN (16);
		*(.eh_frame)

		/*
		 * Read-only data
		 */
		. = ALIGN (16);
		_rodata_start = . ;
		*(.rodata*)
		*(.gnu.linkonce.r*)

                 . = ALIGN (16);
                PROVIDE (_etext = .);
        } >ram

	.tdata : {
		_TLS_Data_begin = .;
		*(.tdata .tdata.* .gnu.linkonce.td.*)
		_TLS_Data_end = .;
	} >ram

	.tbss : {
		_TLS_BSS_begin = .;
		*(.tbss .tbss.* .gnu.linkonce.tb.*) *(.tcommon)
		_TLS_BSS_end = .;
	} >ram

	_TLS_Data_size = _TLS_Data_end - _TLS_Data_begin;
	_TLS_Data_begin = _TLS_Data_size != 0 ? _TLS_Data_begin : _TLS_BSS_begin;
	_TLS_Data_end = _TLS_Data_size != 0 ? _TLS_Data_end : _TLS_BSS_begin;
	_TLS_BSS_size = _TLS_BSS_end - _TLS_BSS_begin;
	_TLS_Size = _TLS_BSS_end - _TLS_Data_begin;
	_TLS_Alignment = MAX (ALIGNOF (.tdata), ALIGNOF (.tbss));

        .data : {
                PROVIDE (_copy_start = .);
                *(.data*)
		*(.gnu.linkonce.d*)
		*(.gcc_except_table*)
		*(.jcr)
                . = ALIGN (16);
                PROVIDE (_edata = .);
                PROVIDE (_copy_end = .);
        } >ram
        .bss : {
                _clear_start = .;
                *(.dynbss)
                *(.bss* .gnu.linkonce.b.*)
                *(COMMON)
                . = ALIGN (16);
                PROVIDE (end = .);

                . += _StackSize;
                . = ALIGN (16);
                _stack_init = .;
                _clear_end = .;

                WorkAreaBase = .;
        } >ram

  /* Stabs debugging sections.  */
  .stab 0 : { *(.stab) }
  .stabstr 0 : { *(.stabstr) }
  .stab.excl 0 : { *(.stab.excl) }
  .stab.exclstr 0 : { *(.stab.exclstr) }
  .stab.index 0 : { *(.stab.index) }
  .stab.indexstr 0 : { *(.stab.indexstr) }
  .comment 0 : { *(.comment) }

  /* DWARF debug sections.
     Symbols in the DWARF debugging sections are relative to the beginning
     of the section so we begin them at 0.  */
  /* DWARF 1 */
  .debug          0 : { *(.debug) }
  .line           0 : { *(.line) }
  
  /* GNU DWARF 1 extensions */
  .debug_srcinfo  0 : { *(.debug_srcinfo) }
  .debug_sfnames  0 : { *(.debug_sfnames) }
  
  /* DWARF 1.1 and DWARF 2 */
  .debug_aranges  0 : { *(.debug_aranges) }
  .debug_pubnames 0 : { *(.debug_pubnames) }
  
  /* DWARF 2 */
  .debug_info     0 : { *(.debug_info) }
  .debug_abbrev   0 : { *(.debug_abbrev) }
  .debug_line     0 : { *(.debug_line) }
  .debug_frame    0 : { *(.debug_frame) }
  .debug_str      0 : { *(.debug_str) }
  .debug_loc      0 : { *(.debug_loc) }
  .debug_macinfo  0 : { *(.debug_macinfo) }
  
  /* SGI/MIPS DWARF 2 extensions */
  .debug_weaknames 0 : { *(.debug_weaknames) }
  .debug_funcnames 0 : { *(.debug_funcnames) }
  .debug_typenames 0 : { *(.debug_typenames) }
  .debug_varnames  0 : { *(.debug_varnames) }
  /* These must appear regardless of  .  */
}
