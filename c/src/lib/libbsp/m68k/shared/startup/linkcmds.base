/*
 * Copyright (c) 2008-2013 embedded brains GmbH.  All rights reserved.
 *
 *  embedded brains GmbH
 *  Dornierstr. 4
 *  82178 Puchheim
 *  Germany
 *  <rtems@embedded-brains.de>
 *
 * The license and distribution terms for this file may be
 * found in the file LICENSE in this distribution or at
 * http://www.rtems.org/license/LICENSE.
 */

OUTPUT_FORMAT("elf32-m68k", "elf32-m68k", "elf32-m68k")

OUTPUT_ARCH(m68k)

ENTRY(_start)

bsp_initstack_size = DEFINED (bsp_initstack_size) ? bsp_initstack_size : 2048;

MEMORY {
	UNEXPECTED_SECTIONS : ORIGIN = 0xffffffff, LENGTH = 0
}

SECTIONS {
	.vector0 : ALIGN_WITH_INPUT {
		bsp_vector0_begin = .;
		*(.vectors*)
		bsp_vector0_end = .;
	} > REGION_TEXT AT > REGION_TEXT
	bsp_vector0_size = bsp_vector0_end - bsp_vector0_begin;

	.text : ALIGN_WITH_INPUT {
		*(.text.unlikely .text.*_unlikely)
		*(.text .stub .text.* .gnu.linkonce.t.*)
		/* .gnu.warning sections are handled specially by elf32.em.  */
		*(.gnu.warning)
	} > REGION_TEXT AT > REGION_TEXT_LOAD
	.init : ALIGN_WITH_INPUT {
		KEEP (*(.init))
	} > REGION_TEXT AT > REGION_TEXT_LOAD
	.fini : ALIGN_WITH_INPUT {
		KEEP (*(.fini))
	} > REGION_TEXT AT > REGION_TEXT_LOAD
	.rodata : ALIGN_WITH_INPUT {
		*(.rodata .rodata.* .gnu.linkonce.r.*)
	} > REGION_TEXT AT > REGION_TEXT_LOAD
	.rodata1 : ALIGN_WITH_INPUT {
		*(.rodata1)
	} > REGION_TEXT AT > REGION_TEXT_LOAD
	.eh_frame : ALIGN_WITH_INPUT {
		KEEP (*(.eh_frame))
	} > REGION_TEXT AT > REGION_TEXT_LOAD
	.gcc_except_table : ALIGN_WITH_INPUT {
		*(.gcc_except_table .gcc_except_table.*)
	} > REGION_TEXT AT > REGION_TEXT_LOAD
	.tdata : ALIGN_WITH_INPUT {
		_TLS_Data_begin = .;
		*(.tdata .tdata.* .gnu.linkonce.td.*)
		_TLS_Data_end = .;
	} > REGION_TEXT AT > REGION_TEXT_LOAD
	.tbss : ALIGN_WITH_INPUT {
		_TLS_BSS_begin = .;
		*(.tbss .tbss.* .gnu.linkonce.tb.*) *(.tcommon)
		_TLS_BSS_end = .;
	} > REGION_TEXT AT > REGION_TEXT_LOAD
	_TLS_Data_size = _TLS_Data_end - _TLS_Data_begin;
	_TLS_Data_begin = _TLS_Data_size != 0 ? _TLS_Data_begin : _TLS_BSS_begin;
	_TLS_Data_end = _TLS_Data_size != 0 ? _TLS_Data_end : _TLS_BSS_begin;
	_TLS_BSS_size = _TLS_BSS_end - _TLS_BSS_begin;
	_TLS_Size = _TLS_BSS_end - _TLS_Data_begin;
	_TLS_Alignment = MAX (ALIGNOF (.tdata), ALIGNOF (.tbss));
	.preinit_array : ALIGN_WITH_INPUT {
		PROVIDE_HIDDEN (__preinit_array_start = .);
		KEEP (*(.preinit_array))
		PROVIDE_HIDDEN (__preinit_array_end = .);
	} > REGION_TEXT AT > REGION_TEXT_LOAD
	.init_array : ALIGN_WITH_INPUT {
		PROVIDE_HIDDEN (__init_array_start = .);
		KEEP (*(SORT(.init_array.*)))
		KEEP (*(.init_array))
		PROVIDE_HIDDEN (__init_array_end = .);
	} > REGION_TEXT AT > REGION_TEXT_LOAD
	.fini_array : ALIGN_WITH_INPUT {
		PROVIDE_HIDDEN (__fini_array_start = .);
		KEEP (*(.fini_array))
		KEEP (*(SORT(.fini_array.*)))
		PROVIDE_HIDDEN (__fini_array_end = .);
	} > REGION_TEXT AT > REGION_TEXT_LOAD
	.ctors : ALIGN_WITH_INPUT {
		/* gcc uses crtbegin.o to find the start of
		   the constructors, so we make sure it is
		   first.  Because this is a wildcard, it
		   doesn't matter if the user does not
		   actually link against crtbegin.o; the
		   linker won't look for a file to match a
		   wildcard.  The wildcard also means that it
		   doesn't matter which directory crtbegin.o
		   is in.  */
		KEEP (*crtbegin.o(.ctors))
		KEEP (*crtbegin?.o(.ctors))
		/* We don't want to include the .ctor section from
		   the crtend.o file until after the sorted ctors.
		   The .ctor section from the crtend file contains the
		   end of ctors marker and it must be last */
		KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .ctors))
		KEEP (*(SORT(.ctors.*)))
		KEEP (*(.ctors))
	} > REGION_TEXT AT > REGION_TEXT_LOAD
	.dtors : ALIGN_WITH_INPUT {
		KEEP (*crtbegin.o(.dtors))
		KEEP (*crtbegin?.o(.dtors))
		KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .dtors))
		KEEP (*(SORT(.dtors.*)))
		KEEP (*(.dtors))
	} > REGION_TEXT AT > REGION_TEXT_LOAD
	.data.rel.ro : ALIGN_WITH_INPUT {
		*(.data.rel.ro.local* .gnu.linkonce.d.rel.ro.local.*)
		*(.data.rel.ro* .gnu.linkonce.d.rel.ro.*)
	} > REGION_TEXT AT > REGION_TEXT_LOAD
	.jcr : ALIGN_WITH_INPUT {
		KEEP (*(.jcr))
	} > REGION_TEXT AT > REGION_TEXT_LOAD
	.interp : ALIGN_WITH_INPUT {
		*(.interp)
	} > REGION_TEXT AT > REGION_TEXT_LOAD
	.note.gnu.build-id : ALIGN_WITH_INPUT {
		*(.note.gnu.build-id)
	} > REGION_TEXT AT > REGION_TEXT_LOAD
	.hash : ALIGN_WITH_INPUT {
		*(.hash)
	} > REGION_TEXT AT > REGION_TEXT_LOAD
	.gnu.hash : ALIGN_WITH_INPUT {
		*(.gnu.hash)
	} > REGION_TEXT AT > REGION_TEXT_LOAD
	.dynsym : ALIGN_WITH_INPUT {
		*(.dynsym)
	} > REGION_TEXT AT > REGION_TEXT_LOAD
	.dynstr : ALIGN_WITH_INPUT {
		*(.dynstr)
	} > REGION_TEXT AT > REGION_TEXT_LOAD
	.gnu.version : ALIGN_WITH_INPUT {
		*(.gnu.version)
	} > REGION_TEXT AT > REGION_TEXT_LOAD
	.gnu.version_d : ALIGN_WITH_INPUT {
		*(.gnu.version_d)
	} > REGION_TEXT AT > REGION_TEXT_LOAD
	.gnu.version_r : ALIGN_WITH_INPUT {
		*(.gnu.version_r)
	} > REGION_TEXT AT > REGION_TEXT_LOAD
	.rel.dyn : ALIGN_WITH_INPUT {
		*(.rel.init)
		*(.rel.text .rel.text.* .rel.gnu.linkonce.t.*)
		*(.rel.fini)
		*(.rel.rodata .rel.rodata.* .rel.gnu.linkonce.r.*)
		*(.rel.data.rel.ro* .rel.gnu.linkonce.d.rel.ro.*)
		*(.rel.data .rel.data.* .rel.gnu.linkonce.d.*)
		*(.rel.tdata .rel.tdata.* .rel.gnu.linkonce.td.*)
		*(.rel.tbss .rel.tbss.* .rel.gnu.linkonce.tb.*)
		*(.rel.ctors)
		*(.rel.dtors)
		*(.rel.got)
		*(.rel.bss .rel.bss.* .rel.gnu.linkonce.b.*)
		PROVIDE_HIDDEN (__rel_iplt_start = .);
		*(.rel.iplt)
		PROVIDE_HIDDEN (__rel_iplt_end = .);
		PROVIDE_HIDDEN (__rela_iplt_start = .);
		PROVIDE_HIDDEN (__rela_iplt_end = .);
	} > REGION_TEXT AT > REGION_TEXT_LOAD
	.rela.dyn : ALIGN_WITH_INPUT {
		*(.rela.init)
		*(.rela.text .rela.text.* .rela.gnu.linkonce.t.*)
		*(.rela.fini)
		*(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*)
		*(.rela.data .rela.data.* .rela.gnu.linkonce.d.*)
		*(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*)
		*(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*)
		*(.rela.ctors)
		*(.rela.dtors)
		*(.rela.got)
		*(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*)
		PROVIDE_HIDDEN (__rel_iplt_start = .);
		PROVIDE_HIDDEN (__rel_iplt_end = .);
		PROVIDE_HIDDEN (__rela_iplt_start = .);
		*(.rela.iplt)
		PROVIDE_HIDDEN (__rela_iplt_end = .);
	} > REGION_TEXT AT > REGION_TEXT_LOAD
	.rel.plt : ALIGN_WITH_INPUT {
		*(.rel.plt)
	} > REGION_TEXT AT > REGION_TEXT_LOAD
	.rela.plt : ALIGN_WITH_INPUT {
		*(.rela.plt)
	} > REGION_TEXT AT > REGION_TEXT_LOAD
	.plt : ALIGN_WITH_INPUT {
		*(.plt)
	} > REGION_TEXT AT > REGION_TEXT_LOAD
	.iplt : ALIGN_WITH_INPUT {
		*(.iplt)
	} > REGION_TEXT AT > REGION_TEXT_LOAD
	.dynamic : ALIGN_WITH_INPUT {
		*(.dynamic)
	} > REGION_TEXT AT > REGION_TEXT_LOAD
	.got : ALIGN_WITH_INPUT {
		*(.got.plt) *(.igot.plt) *(.got) *(.igot)
	} > REGION_TEXT AT > REGION_TEXT_LOAD
	.rtemsroset : ALIGN_WITH_INPUT {
		/* Special FreeBSD linker set sections */
		__start_set_sysctl_set = .;
		*(set_sysctl_*);
		__stop_set_sysctl_set = .;
		*(set_domain_*);
		*(set_pseudo_*);

		KEEP (*(SORT(.rtemsroset.*)))
	} > REGION_TEXT AT > REGION_TEXT_LOAD

	.vector1 : ALIGN_WITH_INPUT {
		bsp_vector1_begin = .;
		. = . + (ORIGIN (REGION_TEXT) == ORIGIN (REGION_DATA) ? 0 : bsp_vector0_size);
		bsp_vector1_end = .;
	} > REGION_DATA AT > REGION_DATA
	bsp_vector1_size = bsp_vector1_end - bsp_vector1_begin;

	.initstack : ALIGN_WITH_INPUT {
		bsp_initstack_begin = .;
		. = . + bsp_initstack_size;
		bsp_initstack_end = .;
	} > REGION_DATA AT > REGION_DATA

	.data : ALIGN_WITH_INPUT {
		bsp_section_data_begin = .;
		*(.data .data.* .gnu.linkonce.d.*)
		SORT(CONSTRUCTORS)
	} > REGION_DATA AT > REGION_DATA_LOAD
	.data1 : ALIGN_WITH_INPUT {
		*(.data1)
	} > REGION_DATA AT > REGION_DATA_LOAD
	.rtemsrwset : ALIGN_WITH_INPUT {
		KEEP (*(SORT(.rtemsrwset.*)))
		bsp_section_data_end = .;
	} > REGION_DATA AT > REGION_DATA_LOAD
	bsp_section_data_size = bsp_section_data_end - bsp_section_data_begin;
	bsp_section_data_load_begin = LOADADDR (.data);
	bsp_section_data_load_end = bsp_section_data_load_begin + bsp_section_data_size;

	.bss : ALIGN_WITH_INPUT {
		bsp_section_bss_begin = .;
		*(.dynbss)
		*(.bss .bss.* .gnu.linkonce.b.*)
		*(COMMON)
		bsp_section_bss_end = .;
	} > REGION_DATA AT > REGION_DATA
	bsp_section_bss_size = bsp_section_bss_end - bsp_section_bss_begin;

	.work : ALIGN_WITH_INPUT {
		/*
		 * The work section will occupy the remaining REGION_DATA region and
		 * contains the RTEMS work space and heap.
		 */
		bsp_section_work_begin = .;
		. += ORIGIN (REGION_DATA) + LENGTH (REGION_DATA) - ABSOLUTE (.);
		bsp_section_work_end = .;
	} > REGION_DATA AT > REGION_DATA
	bsp_section_work_size = bsp_section_work_end - bsp_section_work_begin;

	/* FIXME */
	RamBase = ORIGIN (REGION_DATA);
	RamSize = LENGTH (REGION_DATA);
	WorkAreaBase = bsp_section_work_begin;
	HeapSize = 0;

	/* Stabs debugging sections.  */
	.stab          0 : { *(.stab) }
	.stabstr       0 : { *(.stabstr) }
	.stab.excl     0 : { *(.stab.excl) }
	.stab.exclstr  0 : { *(.stab.exclstr) }
	.stab.index    0 : { *(.stab.index) }
	.stab.indexstr 0 : { *(.stab.indexstr) }
	.comment       0 : { *(.comment) }
	/* DWARF debug sections.
	   Symbols in the DWARF debugging sections are relative to the beginning
	   of the section so we begin them at 0.  */
	/* DWARF 1 */
	.debug          0 : { *(.debug) }
	.line           0 : { *(.line) }
	/* GNU DWARF 1 extensions */
	.debug_srcinfo  0 : { *(.debug_srcinfo) }
	.debug_sfnames  0 : { *(.debug_sfnames) }
	/* DWARF 1.1 and DWARF 2 */
	.debug_aranges  0 : { *(.debug_aranges) }
	.debug_pubnames 0 : { *(.debug_pubnames) }
	/* DWARF 2 */
	.debug_info     0 : { *(.debug_info .gnu.linkonce.wi.*) }
	.debug_abbrev   0 : { *(.debug_abbrev) }
	.debug_line     0 : { *(.debug_line) }
	.debug_frame    0 : { *(.debug_frame) }
	.debug_str      0 : { *(.debug_str) }
	.debug_loc      0 : { *(.debug_loc) }
	.debug_macinfo  0 : { *(.debug_macinfo) }
	/* SGI/MIPS DWARF 2 extensions */
	.debug_weaknames 0 : { *(.debug_weaknames) }
	.debug_funcnames 0 : { *(.debug_funcnames) }
	.debug_typenames 0 : { *(.debug_typenames) }
	.debug_varnames  0 : { *(.debug_varnames) }
	/* DWARF 3 */
	.debug_pubtypes 0 : { *(.debug_pubtypes) }
	.debug_ranges   0 : { *(.debug_ranges) }
	/* DWARF extension */
	.debug_macro    0 : { *(.debug_macro) }
	/DISCARD/ : { *(.note.GNU-stack) *(.gnu_debuglink) *(.gnu.lto_*) }

	/*
	 * This is a RTEMS specific section to catch all unexpected input
	 * sections.  In case you get an error like
	 *   "section `.unexpected_sections' will not fit in region
	 *   `UNEXPECTED_SECTIONS'"
	 * you have to figure out the offending input section and add it to the
	 * appropriate output section definition above.
	 */
	.unexpected_sections : { *(*) } > UNEXPECTED_SECTIONS
}
