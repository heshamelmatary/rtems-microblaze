#
#  Timing Test Suite Results for the Cogent CSB360 MCF5272 BSP
#  
#

Board:  Cogent CSB360
CPU: MCF5372 - Coldfire
Clock Speed: 66 MHz
Memory Configuration: SDRAM, 32 bits wide

Times Reported in: microseconds
Timer Source: Timer 2

Instruction cache is enabled.

== ================================================================  ===
 1 rtems_semaphore_create                                            27
 1 rtems_semaphore_delete                                            30
 1 rtems_semaphore_obtain: available                                 6
 1 rtems_semaphore_obtain: not available -- NO_WAIT                  7
 1 rtems_semaphore_release: no waiting tasks                         17

 2 rtems_semaphore_obtain: not available -- caller blocks            53

 3 rtems_semaphore_release: task readied -- preempts caller          41

 4 rtems_task_restart: blocked task -- preempts caller               83
 4 rtems_task_restart: ready task -- preempts caller                 79
 4 rtems_semaphore_release: task readied -- returns to caller        30
 4 rtems_task_create                                                 130
 4 rtems_task_start                                                  38
 4 rtems_task_restart: suspended task -- returns to caller           43
 4 rtems_task_delete: suspended task                                 88
 4 rtems_task_restart: ready task -- returns to caller               45
 4 rtems_task_restart: blocked task -- returns to caller             58
 4 rtems_task_delete: blocked task                                   91

 5 rtems_task_suspend: calling task                                  35
 5 rtems_task_resume: task readied -- preempts caller                35

 6 rtems_task_restart: calling task                                  53
 6 rtems_task_suspend: returns to caller                             21
 6 rtems_task_resume: task readied -- returns to caller              21
 6 rtems_task_delete: ready task                                     93

 7 rtems_task_restart: suspended task -- preempts caller             65

 8 rtems_task_set_priority: obtain current priority                  10
 8 rtems_task_set_priority: returns to caller                        28
 8 rtems_task_mode: obtain current mode                              6
 8 rtems_task_mode: no reschedule                                    6
 8 rtems_task_mode: reschedule -- returns to caller                  13
 8 rtems_task_mode: reschedule -- preempts caller                    35
 8 rtems_task_set_note                                               12
 8 rtems_task_get_note                                               13
 8 rtems_clock_set                                                   32
 8 rtems_clock_get                                                   3

 9 rtems_message_queue_create                                        72
 9 rtems_message_queue_send: no waiting tasks                        31
 9 rtems_message_queue_urgent: no waiting tasks                      32
 9 rtems_message_queue_receive: available                            33
 9 rtems_message_queue_flush: no messages flushed                    14
 9 rtems_message_queue_flush: messages flushed                       18
 9 rtems_message_queue_delete                                        40

10 rtems_message_queue_receive: not available -- NO_WAIT             13
10 rtems_message_queue_receive: not available -- caller blocks       52

11 rtems_message_queue_send: task readied -- preempts caller         50

12 rtems_message_queue_send: task readied -- returns to caller       35

13 rtems_message_queue_urgent: task readied -- preempts caller       50

14 rtems_message_queue_urgent: task readied -- returns to caller     38

15 rtems_event_receive: obtain current events                        1
15 rtems_event_receive: not available -- NO_WAIT                     8
15 rtems_event_receive: not available -- caller blocks               41
15 rtems_event_send: no task readied                                 12
15 rtems_event_receive: available                                    16
15 rtems_event_send: task readied -- returns to caller               23

16 rtems_event_send: task readied -- preempts caller                 41

17 rtems_task_set_priority: preempts caller                          55

18 rtems_task_delete: calling task                                   109

19 rtems_signal_catch                                                9
19 rtems_signal_send: returns to caller                              20
19 rtems_signal_send: signal to self                                 30
19 exit ASR overhead: returns to calling task                        23
19 exit ASR overhead: returns to preempting task                     28

20 rtems_partition_create                                            34
20 rtems_region_create                                               50
20 rtems_partition_get_buffer: available                             17
20 rtems_partition_get_buffer: not available                         12
20 rtems_partition_return_buffer                                     29
20 rtems_partition_delete                                            20
20 rtems_region_get_segment: available                               48
20 rtems_region_get_segment: not available -- NO_WAIT                51
20 rtems_region_return_segment: no waiting tasks                     45
20 rtems_region_get_segment: not available -- caller blocks          88
20 rtems_region_return_segment: task readied -- preempts caller      97
20 rtems_region_return_segment: task readied -- returns to caller    81
20 rtems_region_delete                                               39
20 rtems_io_initialize                                               3
20 rtems_io_open                                                     2
20 rtems_io_close                                                    3
20 rtems_io_read                                                     2
20 rtems_io_write                                                    2
20 rtems_io_control                                                  2

21 rtems_task_ident                                                  115
21 rtems_message_queue_ident                                         111
21 rtems_semaphore_ident                                             127
21 rtems_partition_ident                                             112
21 rtems_region_ident                                                114
21 rtems_port_ident                                                  110
21 rtems_timer_ident                                                 110
21 rtems_rate_monotonic_ident                                        111

22 rtems_message_queue_broadcast: task readied -- returns to caller  43
22 rtems_message_queue_broadcast: no waiting tasks                   20
22 rtems_message_queue_broadcast: task readied -- preempts caller    58

23 rtems_timer_create                                                12
23 rtems_timer_fire_after: inactive                                  24
23 rtems_timer_fire_after: active                                    25
23 rtems_timer_cancel: active                                        11
23 rtems_timer_cancel: inactive                                      8
23 rtems_timer_reset: inactive                                       21
23 rtems_timer_reset: active                                         23
23 rtems_timer_fire_when: inactive                                   37
23 rtems_timer_fire_when: active                                     38
23 rtems_timer_delete: active                                        18
23 rtems_timer_delete: inactive                                      16
23 rtems_task_wake_when                                              60

24 rtems_task_wake_after: yield -- returns to caller                 6
24 rtems_task_wake_after: yields -- preempts caller                  25

25 rtems_clock_tick                                                  11

26 _ISR_Disable                                                      2
26 _ISR_Flash                                                        1
26 _ISR_Enable                                                       1
26 _Thread_Disable_dispatch                                          1
26 _Thread_Enable_dispatch                                           6
26 _Thread_Set_state                                                 13
26 _Thread_Disptach (NO FP)                                          25
26 context switch: no floating point contexts                        18
26 context switch: self                                              5
26 context switch: to another task                                   5
26 fp context switch: restore 1st FP task                            18
26 fp context switch: save idle, restore initialized                 6
26 fp context switch: save idle, restore idle                        19
26 fp context switch: save initialized, restore initialized          6
26 _Thread_Resume                                                    12
26 _Thread_Unblock                                                   11
26 _Thread_Ready                                                     11
26 _Thread_Get                                                       4
26 _Semaphore_Get                                                    2
26 _Thread_Get: invalid id                                           1

27 interrupt entry overhead: returns to interrupted task             5
27 interrupt exit overhead: returns to interrupted task              4
27 interrupt entry overhead: returns to nested interrupt             3
27 interrupt exit overhead: returns to nested interrupt              4
27 interrupt entry overhead: returns to preempting task              4
27 interrupt exit overhead: returns to preempting task               31

28 rtems_port_create                                                 19
28 rtems_port_external_to_internal                                   11
28 rtems_port_internal_to_external                                   10
28 rtems_port_delete                                                 21

29 rtems_rate_monotonic_create                                       17
29 rtems_rate_monotonic_period: initiate period -- returns to caller 29
29 rtems_rate_monotonic_period: obtain status                        16
29 rtems_rate_monotonic_cancel                                       20
29 rtems_rate_monotonic_delete: inactive                             25
29 rtems_rate_monotonic_delete: active                               25
29 rtems_rate_monotonic_period: conclude periods -- caller blocks    34

