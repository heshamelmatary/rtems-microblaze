/*
 * This file contains GNU linker directives for an general SH4 
 * board.
 *
 * Variations in memory size and allocation can be made by
 * overriding some values with linker command-line arguments.
 *
 * Copyright (C) 2000 OKTET Ltd., St.-Petersburg, Russia
 * Author: Victor V. Vengerov <vvv@oktet.ru>
 *
 * The license and distribution terms for this file may be
 * found in the file LICENSE in this distribution or at
 *
 * http://www.rtems.org/license/LICENSE.
 */


OUTPUT_FORMAT("elf32-shl", "elf32-shl",
	      "elf32-shl")
OUTPUT_ARCH(sh)
ENTRY(_start)
/* Do we need any of these for elf?
   __DYNAMIC = 0;    */

_RamBase = DEFINED(_RamBase) ? _RamBase : 0x88000000;
_RamSize = DEFINED(_RamSize) ? _RamSize : 8M;
_HeapSize = DEFINED(_HeapSize) ? _HeapSize : (2 * 1024 * 1024);

/*
 * Area assignments:
 *     Area 0: Flash memory, SRAM interface
 *     Area 1: GDC
 *     Area 2: SDRAM
 *     Area 3-6: unused
 */
MEMORY
{
/*
 * Real values
 */
  ram           : o = 0x88000000, l = 8M
  rom           : o = 0x80000000, l = 4M
/*
 * Fake values to test from gdb
 */
/*
  ram           : o = 0x88100000, l = 4M
  rom           : o = 0x88500000, l = 3M
*/
}

SECTIONS
{
  rom : {
    copy_start_in_rom = .;
  } >rom

  /* Read-only sections, merged into text segment: */
  .init          : 
  { 
    KEEP (*(.init))
  } =0
  .text      : AT(copy_start_in_rom)
  {
    copy_start = .;
    *(.text*)

    /*
     * Special FreeBSD sysctl sections.
     */
    . = ALIGN (16);
    ___start_set_sysctl_set = .;
    *(set_sysc*);   /* set_sysctl_* but name is truncated by SH-coff */
    ___stop_set_sysctl_set = ABSOLUTE(.);
    *(set_doma*);   /* set_domain_* but name is truncated by SH-coff */
    *(set_pseudo_*);

    /* .gnu.warning sections are handled specially by elf32.em.  */
    *(.gnu.warning)
    *(.gnu.linkonce.t*)
  } > ram
  _etext = .;
  PROVIDE (etext = .);
  .fini      :
  {
    KEEP (*(.fini))
  } =0
  .rodata   :  AT(LOADADDR(.text) + SIZEOF(.text))
  { 
    *(.rodata) 
    *(.rodata.*) 
    *(.gnu.linkonce.r*) 
    . = ALIGN(32);
  } > ram
  .tdata : {
    __TLS_Data_begin = .;
    *(.tdata .tdata.* .gnu.linkonce.td.*)
    __TLS_Data_end = .;
  } > ram
  .tbss : {
    __TLS_BSS_begin = .;
    *(.tbss .tbss.* .gnu.linkonce.tb.*) *(.tcommon)
    __TLS_BSS_end = .;
  } > ram
  __TLS_Data_size = __TLS_Data_end - __TLS_Data_begin;
  __TLS_Data_begin = __TLS_Data_size != 0 ? __TLS_Data_begin : __TLS_BSS_begin;
  __TLS_Data_end = __TLS_Data_size != 0 ? __TLS_Data_end : __TLS_BSS_begin;
  __TLS_BSS_size = __TLS_BSS_end - __TLS_BSS_begin;
  __TLS_Size = __TLS_BSS_end - __TLS_Data_begin;
  __TLS_Alignment = MAX (ALIGNOF (.tdata), ALIGNOF (.tbss));
  .ctors   :  AT(LOADADDR(.rodata) + SIZEOF(.rodata))
  {
    ___ctors = .;
    /* gcc uses crtbegin.o to find the start of
       the constructors, so we make sure it is
       first.  Because this is a wildcard, it
       doesn't matter if the user does not
       actually link against crtbegin.o; the
       linker won't look for a file to match a
       wildcard.  The wildcard also means that it
       doesn't matter which directory crtbegin.o
       is in.  */
    KEEP (*crtbegin.o(.ctors))
    /* We don't want to include the .ctor section from
       from the crtend.o file until after the sorted ctors.
       The .ctor section from the crtend file contains the
       end of ctors marker and it must be last */
    KEEP (*(EXCLUDE_FILE (*crtend.o ) .ctors))
    KEEP (*(SORT(.ctors.*)))
    KEEP (*(.ctors))
    ___ctors_end = .;
  } > ram
   .dtors         : AT(LOADADDR(.ctors) + SIZEOF(.ctors))
  {
    ___dtors = .;
    KEEP (*crtbegin.o(.dtors))
    KEEP (*(EXCLUDE_FILE (*crtend.o ) .dtors))
    KEEP (*(SORT(.dtors.*)))
    KEEP (*(.dtors))
    ___dtors_end = .;
  } > ram

  /* Adjust the address for the data segment.  We want to adjust up to
     the same address within the page on the next page up.  */
  . = ALIGN(128) + (. & (128 - 1));
  .data     : AT(LOADADDR(.dtors) + SIZEOF(.dtors))
  {
    *(.data)
    *(.data.*)
    *(.gnu.linkonce.d*)
    SORT(CONSTRUCTORS)
    copy_end = .;
  } > ram
  .eh_frame : { *(.eh_frame) } > ram
  /* We want the small data sections together, so single-instruction offsets
     can access them all, and initialized data all before uninitialized, so
     we can shorten the on-disk segment size.  */
  .bss       :
  {
   __bss_start = .;
   *(.dynbss)
   *(.bss .bss* .gnu.linkonce.b*)
   *(COMMON)
   /* Align here to ensure that the .bss section occupies space up to
      _end.  Align after .bss to ensure correct alignment even if the
      .bss section disappears because there are no input sections.  */
   . = ALIGN(32 / 8);
   __bss_end = .;
  } > ram

  .rela.dyn       :
    {
      *(.rela.init)
      *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*)
      *(.rela.fini)
      *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*)
      *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*)
      *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*)
      *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*)
      *(.rela.ctors)
      *(.rela.dtors)
      *(.rela.got)
      *(.rela.sdata .rela.sdata.* .rela.gnu.linkonce.s.*)
      *(.rela.sbss .rela.sbss.* .rela.gnu.linkonce.sb.*)
      *(.rela.sdata2 .rela.sdata2.* .rela.gnu.linkonce.s2.*)
      *(.rela.sbss2 .rela.sbss2.* .rela.gnu.linkonce.sb2.*)
      *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*)
    } >ram
  . = ALIGN(16);

  _WorkAreaBase = . ;

  . = ALIGN(16);
  .stack . : {
     stack_start = .;
     . = . + 4096;
     stack_end = .;
  }

  . = ALIGN(16);
  _CPU_Interrupt_stack_low  = . ;
  _CPU_Interrupt_stack_high = _CPU_Interrupt_stack_low + 4096 ;

  /* Stabs debugging sections.  */
  .stab 0 : { *(.stab) }
  .stabstr 0 : { *(.stabstr) }
  .stab.excl 0 : { *(.stab.excl) }
  .stab.exclstr 0 : { *(.stab.exclstr) }
  .stab.index 0 : { *(.stab.index) }
  .stab.indexstr 0 : { *(.stab.indexstr) }
  .comment 0 : { *(.comment) }
  /* DWARF debug sections.
     Symbols in the DWARF debugging sections are relative to the beginning
     of the section so we begin them at 0.  */
  /* DWARF 1 */
  .debug          0 : { *(.debug) }
  .line           0 : { *(.line) }
  /* GNU DWARF 1 extensions */
  .debug_srcinfo  0 : { *(.debug_srcinfo) }
  .debug_sfnames  0 : { *(.debug_sfnames) }
  /* DWARF 1.1 and DWARF 2 */
  .debug_aranges  0 : { *(.debug_aranges) }
  .debug_pubnames 0 : { *(.debug_pubnames) }
  /* DWARF 2 */
  .debug_info     0 : { *(.debug_info) }
  .debug_abbrev   0 : { *(.debug_abbrev) }
  .debug_line     0 : { *(.debug_line) }
  .debug_frame    0 : { *(.debug_frame) }
  .debug_str      0 : { *(.debug_str) }
  .debug_loc      0 : { *(.debug_loc) }
  .debug_macinfo  0 : { *(.debug_macinfo) }
  /* SGI/MIPS DWARF 2 extensions */
  .debug_weaknames 0 : { *(.debug_weaknames) }
  .debug_funcnames 0 : { *(.debug_funcnames) }
  .debug_typenames 0 : { *(.debug_typenames) }
  .debug_varnames  0 : { *(.debug_varnames) }
  .stack : { _stack = .; *(.stack) }
  /* These must appear regardless of  .  */
}
