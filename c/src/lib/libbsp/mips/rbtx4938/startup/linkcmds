/*
 *  linkcmds
 */

/*
 * Declare some sizes.
 */
RamBase = DEFINED(RamBase) ? RamBase : 0x80000000;
RamSize = DEFINED(RamSize) ? RamSize : 4M;
HeapSize = DEFINED(HeapSize) ? HeapSize : 0x0;
_StackSize = DEFINED(_StackSize) ? _StackSize : 0x1000;

SECTIONS
{ 
  /* 0x80000000 - 0x800FFFFF used by YAMON
	0x80120000 - 0x8012FFFF reserved for shared memory
	0x80130000 beginning of text (code) section
   */
    .text 0x80130000 : 
    { 
       _ftext = . ;
       eprol  =  .;
      *(.text)
      *(.text.*)
      *(.gnu.linkonce.t*)
      *(.mips16.fn.*)
      *(.mips16.call.*)
      PROVIDE (__runtime_reloc_start = .);
      *(.rel.sdata)
      PROVIDE (__runtime_reloc_stop = .);

      /*
       * Special FreeBSD sysctl sections.
       */
      . = ALIGN (16);
      __start_set_sysctl_set = .;
      *(set_sysctl_*);
      __stop_set_sysctl_set = ABSOLUTE(.);
      *(set_domain_*);
      *(set_pseudo_*);

      *(.gcc_except_table*)
      *(.eh_frame_hdr)
      *(.eh_frame)
    }

  .init :
  {
	KEEP(*crti.o(.init))
	KEEP(*(.init))
	KEEP(*crtn.o(.init))
  }

  .fini :
  {
	KEEP(*crti.o(.fini))
	KEEP(*(.fini))
	KEEP(*crtn.o(.fini))
  }

  .ctors    :
  {
    /* gcc uses crtbegin.o to find the start of
       the constructors, so we make sure it is
       first.  Because this is a wildcard, it
       doesn't matter if the user does not
       actually link against crtbegin.o; the
       linker won't look for a file to match a
       wildcard.  The wildcard also means that it
       doesn't matter which directory crtbegin.o
       is in.  */

    KEEP (*crtbegin.o(.ctors))

    /* We don't want to include the .ctor section from
       from the crtend.o file until after the sorted ctors.
       The .ctor section from the crtend file contains the
       end of ctors marker and it must be last */

    KEEP (*(EXCLUDE_FILE (*crtend.o) .ctors))
    KEEP (*(SORT(.ctors.*)))
    KEEP (*(.ctors))
  }

  .dtors    :
  {
    KEEP (*crtbegin.o(.dtors))
    KEEP (*(EXCLUDE_FILE (*crtend.o) .dtors))
    KEEP (*(SORT(.dtors.*)))
    KEEP (*(.dtors))

    etext  =  .;
    _etext  =  .;
  }

  .rdata : {
    *(.rdata)
    *(.rodata)
    *(.rodata.*)
    *(.gnu.linkonce.r*)
  }

  .tdata : {
    _TLS_Data_begin = .;
    *(.tdata .tdata.* .gnu.linkonce.td.*)
    _TLS_Data_end = .;
  }

  .tbss : {
    _TLS_BSS_begin = .;
    *(.tbss .tbss.* .gnu.linkonce.tb.*) *(.tcommon)
    _TLS_BSS_end = .;
  }

  _TLS_Data_size = _TLS_Data_end - _TLS_Data_begin;
  _TLS_Data_begin = _TLS_Data_size != 0 ? _TLS_Data_begin : _TLS_BSS_begin;
  _TLS_Data_end = _TLS_Data_size != 0 ? _TLS_Data_end : _TLS_BSS_begin;
  _TLS_BSS_size = _TLS_BSS_end - _TLS_BSS_begin;
  _TLS_Size = _TLS_BSS_end - _TLS_Data_begin;
  _TLS_Alignment = MAX (ALIGNOF (.tdata), ALIGNOF (.tbss));

   _fdata = ALIGN(16);

  .data : {
    *(.data)
    *(.data.*)
    *(.gnu.linkonce.d*)
    SORT(CONSTRUCTORS)
  }
  . = ALIGN(8);

  .jcr : {
	KEEP (*(.jcr))
  }

  _gp = ALIGN(16) + 0x8000;
  __global = _gp;

  .sdata : {
    *(.sdata)
    *(.sdata.*)
    *(.gnu.linkonce.s*)
  }
  .lit8 : {
    *(.lit8)
  }
  .lit4 : {
    *(.lit4)
  }

   edata  =  .;
   _edata  =  .;
   _fbss = .;

  .sbss : {
    *(.sbss)
    *(.scommon)
  }
  .bss : {
    _bss_start = . ;
    *(.bss)
    *(COMMON)
    . = ALIGN (64);
    _stack_limit = .;
    . += _StackSize;
    __stack = .;
    _stack_init = .;
     end = .;
    _end = .;
    WorkAreaBase = .;
  }


  /* Debug sections.  These should never be loadable, but they must have
     zero addresses for the debuggers to work correctly.  */
  .line			0 : { *(.line)			}
  .debug		0 : { *(.debug)			}
  .debug_sfnames	0 : { *(.debug_sfnames)		}
  .debug_srcinfo	0 : { *(.debug_srcinfo)		}
  .debug_macinfo	0 : { *(.debug_macinfo)		}
  .debug_pubnames	0 : { *(.debug_pubnames)	}
  .debug_aranges	0 : { *(.debug_aranges)		}
}
